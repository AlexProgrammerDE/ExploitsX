package me.bait.exploitfixer.gameplay;

import java.util.HashMap;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wither;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.NotePlayEvent;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.entity.ExplosionPrimeEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.scheduler.BukkitRunnable;

import me.bait.exploitfixer.ExploitFixer;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.TPS;

//-- // WARNING \\ -- 
//-- THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
//-- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
//-- 
//-- DECOMPILING, COPYING OR REDISTRIBUTING THIS CODE IS A CRIME. IF YOU HAVE ANY QUESTIONS OR CONCERNS
//-- THEY MUST BE VOICED DIRECTLY TO BAITCORP EXECUTIVES BEFORE PERSONAL ACTION.
//-- 
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ -- 

public class lagpatches implements Listener {

	int count;
	public HashMap<Player, Integer> vl = new HashMap<Player, Integer>();

	@SuppressWarnings("deprecation")
	@EventHandler(priority = EventPriority.HIGHEST)
	public void inElytra(final PlayerMoveEvent e) {
		double vdouble = ExploitFixer.getPlugin().getConfig().getDouble("elytraint");
		if (e.getPlayer().isGliding()) {
			if (TPS.getTPS() <= vdouble) {
				if (e.getPlayer().getLocation().getY() < 5000) {
					if (Math.abs(e.getFrom().getZ() - e.getTo().getZ())
							+ Math.abs(e.getFrom().getX() - e.getTo().getX())
							+ Math.abs(e.getFrom().getY() - e.getTo().getY()) > ExploitFixer.getPlugin().getConfig()
									.getDouble("vdouble")) {
						e.setCancelled(true);
						if (vl.containsKey(e.getPlayer())) {
							if (vl.get(e.getPlayer()) == 0) {
								vl.put(e.getPlayer(), 1);
								e.getPlayer().sendMessage(ChatColor.DARK_RED
										+ "Elytras are disabled in low tps. Move to y level 5,000 or more once the TPS is back up in order to fly disregarding the TPS.");
								Bukkit.getScheduler().scheduleSyncDelayedTask(ExploitFixer.getPlugin(),
										new BukkitRunnable() {
											@Override
											public void run() {
												vl.put(e.getPlayer(), 0);
											}
										}, 60L);
							}
						}
					}
				}
			}
		}
	}

	@EventHandler
	public void join(PlayerJoinEvent event) {
		this.vl.put(event.getPlayer(), Integer.valueOf(0));
	}

	@EventHandler
	public void note(NotePlayEvent event) {
		if (API.getTps() < ExploitFixer.getPlugin().getConfig().getDouble("note-tps")) {
			event.setCancelled(true);
			if (API.getTps() < ExploitFixer.getPlugin().getConfig().getDouble("note-remove")
					&& event.getBlock().getType() != Material.BEDROCK
					&& event.getBlock().getType() != Material.ENDER_PORTAL_FRAME) {
				event.getBlock().setType(Material.AIR);
			}
		}
	}

	@EventHandler
	public void ontnt(ExplosionPrimeEvent event) {
		if (TPS.getTPS() <= ExploitFixer.getPlugin().getConfig().getDouble("tntint")) {
			event.setCancelled(true);
		}
	}

	@EventHandler
	public void onWitherSpawn(EntitySpawnEvent event) {
		if (event.getEntity() instanceof Wither) {
			if (TPS.getTPS() <= ExploitFixer.getPlugin().getConfig().getDouble("witherspawn")) {
				event.setCancelled(true);
			}
			count = 0;
			for (Entity e : event.getEntity().getWorld().getNearbyEntities(event.getLocation(), 64, 64, 64)) {
				if (e.getType() == EntityType.WITHER) {
					count = count + 1;
				}
			}
			if (count > ExploitFixer.getPlugin().getConfig().getInt("maxwithers")) {
				event.setCancelled(true);
				Bukkit.getLogger()
						.info("Cancelled a wither spawn from "
								+ (event.getEntity().getWorld().getNearbyPlayers(event.getEntity().getLocation(),
										20.0D))
								+ " due to high amounts at " + event.getLocation().getX() + ", "
								+ event.getLocation().getY() + ", " + event.getLocation().getZ());
			}
		}
	}
}
