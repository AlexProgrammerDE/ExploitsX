package me.bait.exploitfixer.util;

import java.util.HashMap;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import me.bait.exploitfixer.ExploitFixer;

//// WARNING \\
//THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
//THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
//
//DECOMPILING, COPYING OR REDISTRIBUTING THIS CODE IS A CRIME. IF YOU HAVE ANY QUESTIONS OR CONCERNS
//THEY MUST BE VOICED DIRECTLY TO BAITCORP EXECUTIVES BEFORE PERSONAL ACTION.
//
//ExploitsX Sebastian Giheta 2019-2020
////         \\

public class ViolationUtils {

	HashMap<Player, Integer> vlMap = new HashMap<Player, Integer>();
	HashMap<Player, Boolean> vlActive = new HashMap<Player, Boolean>();

	public void addVls(Player player, int vls) {
		if (!vlMap.containsKey(player)) {
			vlMap.put(player, vls);
		} else {
			vlMap.replace(player, Vls(player) + 1);
		}
	}

	public void begin() {
		Bukkit.getScheduler().runTaskTimer(ExploitFixer.getPlugin(), new Runnable() {
			@Override
			public void run() {
				for (Player player : Bukkit.getOnlinePlayers()) {
					if (vlMap.containsKey(player) && vlActive.containsKey(player)) {
						if (getVls(player) > 0) {
							vlMap.replace(player, getVls(player) - 1);
						} else {
							vlMap.remove(player);
							vlActive.remove(player);
						}
					}
				}
			}
		}, ExploitFixer.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
				ExploitFixer.getPlugin().getConfig().getLong("vlremovedelay"));
	}

	public void begin(int speed) {
		Bukkit.getScheduler().runTaskTimer(ExploitFixer.getPlugin(), new Runnable() {
			@Override
			public void run() {
				for (Player player : Bukkit.getOnlinePlayers()) {
					if (vlMap.containsKey(player)) {
						if (vlActive.containsKey(player)) {
							if (getVls(player) > 0) {
								vlMap.replace(player, getVls(player) - 1);
							} else {
								vlMap.remove(player);
								vlActive.remove(player);
							}
						}
					}
				}
			}
		}, ExploitFixer.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
				ExploitFixer.getPlugin().getConfig().getLong("vlremovedelay") * speed);
	}

	public int getVls(Player player) {
		int vls = 0;
		if (vlMap.containsKey(player)) {
			vls = vlMap.get(player);
		}
		return vls;
	}

	public void removeVL(final Player player) {
		if (vlActive.containsKey(player)) {
			vlActive.replace(player, true);
		} else {
			vlActive.put(player, true);
		}
	}

	public void resetVls(Player player) {
		try {
			if (vlMap.containsKey(player)) {
				vlMap.remove(player);
			}
			if (vlActive.containsKey(player)) {
				vlActive.remove(player);
			}
		} finally {
		}
	}

	public boolean vlMapContainsPlayer(Player player) {
		if (vlMap.containsKey(player)) {
			return true;
		} else {
			return false;
		}
	}

	public int Vls(Player player) {
		int vls = vlMap.get(player);
		return vls;
	}
}
