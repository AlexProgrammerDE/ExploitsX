package me.bait.exploitfixer.chatco;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;

import me.bait.exploitfixer.exploitfixer;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.CH;

public class Whispers implements Listener {
	public static final String DATE_FORMAT_NOW = "yyyy-MM-dd HH:mm:ss";

	private static String sendformat = CH.getString("ChatCo.WhisperFormat.Send");

	private static String recieveformat = CH.getString("ChatCo.WhisperFormat.Receive");

	private static boolean rewire = CH.getBoolean("rewire-chatco", true);

	private static boolean replycommands = CH.getBoolean("ChatCo.ReplyCommands", true);
	private static boolean whisperlog = CH.getBoolean("ChatCo.WhisperLog");
	private static boolean whisperMonitoring = CH.getBoolean("ChatCo.WhisperMonitoring", true);
	private static boolean ignoresEnabled = CH.getBoolean("ChatCo.ignoreMessageEnabled", true);
	private static boolean disabledMessage = CH.getBoolean("ChatCo.chatDisabledMessageEnabled", true);
	private static boolean newCommands = CH.getBoolean("ChatCo.NewCommands", true);
	private static boolean ignoreMessage = CH.getBoolean("ChatCo.ignoreMessageEnabled", true);
	public String now() {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(cal.getTime());
	}
	public static void reload() {
		sendformat = CH.getString("ChatCo.WhisperFormat.Send");
		recieveformat = CH.getString("ChatCo.WhisperFormat.Receive");
		rewire = CH.getBoolean("rewire-chatco", true);
		replycommands = CH.getBoolean("ChatCo.ReplyCommands", true);
		whisperlog = CH.getBoolean("ChatCo.WhisperLog");
		whisperMonitoring = CH.getBoolean("ChatCo.WhisperMonitoring", true);
		ignoresEnabled = CH.getBoolean("ChatCo.ignoreMessageEnabled", true);
		disabledMessage = CH.getBoolean("ChatCo.chatDisabledMessageEnabled", true);
		newCommands = CH.getBoolean("ChatCo.NewCommands", true);
		ignoreMessage = CH.getBoolean("ChatCo.ignoreMessageEnabled", true);
	}
	public exploitfixer plugin;

	public Whispers(exploitfixer plugin) {
		this.plugin = plugin;
	}

	@EventHandler(ignoreCancelled = true)
	public void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event) throws IOException {
		if (!rewire)
			return;
		boolean doNotSend = false;
		boolean isIgnoring = false;
		String inputText = event.getMessage();
		String[] args = inputText.split("\\ ", 0);
		Player sender = event.getPlayer();
		if (replycommands && (args[0].equals("/r") || args[0].equals("/reply"))) {
			Player target = null;
			if (args.length == 1)
				sender.sendMessage("Usage: /r <message>");
			if (ChatCommandHandle.getCCPlayer(sender).getLastMessenger() != null)
				target = ChatCommandHandle.getCCPlayer(sender).getLastMessenger();
			if (target == null && (ChatCommandHandle.getCCPlayer(sender)).LastMessenger != null) {
				sender.sendMessage("The last person who whispered you("
						+ (ChatCommandHandle.getCCPlayer(sender)).LastMessenger + ") is offline.");
			} else if (target == null) {
				sender.sendMessage("You have received no whispers recently");
			} else if (target != null) {
				try {
					if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
						doNotSend = true;
				} catch (Exception exception) {
				}
				if (ChatCommandHandle.checkForIgnores
						&& ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getName()))
					isIgnoring = true;
				StringBuilder message = new StringBuilder();
				for (int z = 1; z < args.length; z++) {
					if (z > 1)
						message.append(" ");
					message.append(args[z]);
				}
				String senderMessage = whisperFormat("sender", sender, target);
				String receiverMessage = whisperFormat("target", sender, target);
				String result = String.valueOf(String.valueOf(receiverMessage)) + message;
				sender.sendMessage(String.valueOf(String.valueOf(senderMessage)) + message);
				if (isIgnoring && ignoresEnabled)
					sender.sendMessage(String.valueOf(String.valueOf(ChatColor.RED.toString())) + target.getName()
							+ " is ignoring you.");
				if (doNotSend && disabledMessage)
					sender.sendMessage(String.valueOf(String.valueOf(ChatColor.RED.toString())) + target.getName()
							+ "'s chat is disabled.");
				if (!doNotSend && !isIgnoring) {
					target.sendMessage(result);
					ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
				}
				if (doNotSend || isIgnoring)
					inputText = "***WAS NOT SENT*** " + inputText;
				if (whisperlog)
					whisperLog(inputText, sender.getName());
				if (whisperMonitoring)
					API.alertMessage(API.getPrefix() + "&aChatCo: " + sender.getName() + ": " + inputText);
			}
			event.setCancelled(true);
		}
		if (newCommands) {
			if (inputText.toLowerCase().startsWith("/tell ") || inputText.toLowerCase().startsWith("/msg ")
					|| inputText.toLowerCase().startsWith("/t ") || inputText.toLowerCase().startsWith("/w ")
					|| inputText.toLowerCase().startsWith("/whisper ") || inputText.toLowerCase().startsWith("/pm ")) {
				if (args.length == 1)
					sender.sendMessage("Usage: /t <player> <message>");
				Player target = Bukkit.getPlayer(args[1]);
				if (target == null)
					return;
				try {
					if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
						doNotSend = true;
				} catch (Exception exception) {
				}
				if (ChatCommandHandle.checkForIgnores
						&& ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getName()))
					isIgnoring = true;
				event.setCancelled(true);
				StringBuilder message = new StringBuilder();
				for (int z = 2; z < args.length; z++) {
					if (z > 2)
						message.append(" ");
					message.append(args[z]);
				}
				String senderMessage = whisperFormat("sender", sender, target);
				String receiverMessage = whisperFormat("target", sender, target);
				String result = receiverMessage + message;
				sender.sendMessage(senderMessage + message);
				if (isIgnoring && ignoreMessage)
					sender.sendMessage(ChatColor.RED + target.getName() + " is ignoring you.");
				if (doNotSend && disabledMessage)
					sender.sendMessage(ChatColor.RED.toString() + target.getName() + "'s chat is disabled.");
				if (!doNotSend && !isIgnoring) {
					target.sendMessage(result);
					ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
				}
				if (doNotSend || isIgnoring)
					inputText = "***WAS NOT SENT*** " + inputText;
				if (whisperlog)
					whisperLog(inputText, sender.getName());
				if (whisperMonitoring)
					API.alertMessage(API.getPrefix() + "&aChatCo: " + sender.getName() + ": " + inputText);
			}
		} else {
			Player target = Bukkit.getPlayer(args[1]);
			if (target == null)
				return;
			if ((ChatCommandHandle.getCCPlayer(target)).tellsDisabled)
				doNotSend = true;
			if (ChatCommandHandle.checkForIgnores && ChatCommandHandle.getCCPlayer(target).isIgnored(sender.getName()))
				isIgnoring = true;
			if (inputText.toLowerCase().startsWith("/tell ") || inputText.toLowerCase().startsWith("/w ")
					|| inputText.toLowerCase().startsWith("/msg ")) {
				event.setCancelled(true);
				StringBuilder message = new StringBuilder();
				for (int z = 2; z < args.length; z++) {
					if (z > 2)
						message.append(" ");
					message.append(args[z]);
				}
				String senderMessage = whisperFormat("sender", sender, target);
				String receiverMessage = whisperFormat("target", sender, target);
				String result = receiverMessage + message;
				sender.sendMessage(senderMessage + message);
				if (isIgnoring && ignoresEnabled)
					sender.sendMessage(ChatColor.RED.toString() + target + " is ignoring you.");
				if (doNotSend && disabledMessage)
					sender.sendMessage(ChatColor.RED.toString() + target + "'s chat is disabled.");
				if (!doNotSend && !isIgnoring) {
					target.sendMessage(result);
					ChatCommandHandle.getCCPlayer(target).setLastMessenger(sender);
				}
				if (doNotSend || isIgnoring)
					inputText = "***WAS NOT SENT*** " + inputText;
				if (whisperlog)
					whisperLog(inputText, sender.getName());
				if (whisperMonitoring)
					API.alertMessage(API.getPrefix() + "&aChatCo: " + sender.getName() + ": " + inputText);
			}
		}
	}

	public String whisperFormat(String who, Player sender, Player target) {
		String data = "";
		if (who.equalsIgnoreCase("sender")) {
			data = sendformat;
		} else {
			data = recieveformat;
		}
		data = ChatColor.translateAlternateColorCodes('&', data);
		data = data.replace("RECEIVER", target.getName());
		data = data.replace("SENDER", sender.getName());
		return data;
	}

	public void whisperLog(String text, String sender) {
		try {
			FileWriter fwo = new FileWriter(ChatCommandHandle.WhisperLog, true);
			BufferedWriter bwo = new BufferedWriter(fwo);
			bwo.write(String.valueOf(String.valueOf(now())) + " " + sender + ": " + text);
			bwo.newLine();
			bwo.close();
		} catch (IOException ioexception) {
			ioexception.printStackTrace();
		}
	}
}
