package me.bait.exploitfixer.chatco;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.AsyncPlayerChatEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import me.bait.exploitfixer.ExploitFixer;
import me.bait.exploitfixer.util.API;
import me.bait.exploitfixer.util.CH;

//-- // WARNING \\ -- 
//-- PORTIONS OF THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
//-- THIS PROGRAM IS LICENSED FOR MODIFICATION TO AND ONLY TO: "BAITCORP LABS" [FR], "CCHOST PARIS" [FR].
//-- 
//-- DECOMPILING, COPYING OR REDISTRIBUTING THIS CODE IS A CRIME. IF YOU HAVE ANY QUESTIONS OR CONCERNS
//-- THEY MUST BE VOICED DIRECTLY TO BAITCORP EXECUTIVES BEFORE PERSONAL ACTION.
//-- 
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ -- 

public class ChatCommandHandle implements Listener {

	public static File Configuration2;

	public static File WhisperLog;

	public static File CommandLog;

	public static File Changelog;

	public final static ArrayList<CCPlayer> playerlist = new ArrayList<>();

	public static File dataFolder;

	public static boolean checkForChatDisable = false;

	public static boolean checkForIgnores = false;

	private static boolean rewire = CH.getBoolean("rewire-chatco", true);
	private static boolean togglechat = CH.getBoolean("ChatCo.toggleChatEnabled", true);
	private static boolean ignoresEnabled = CH.getBoolean("ChatCo.ignoresEnabled", true);

	public static boolean checkChatCoCommand(PlayerCommandPreprocessEvent event, Player sender, String message) {
		String label = event.getMessage().toLowerCase();
		String[] args = event.getMessage().toLowerCase().split("\\s");
		if (label.startsWith("/togglechat") && togglechat) {
			try {
				if (toggleChat(sender)) {
					sender.sendMessage(
							ChatColor.RED + "Your chat is now disabled until you type /togglechat or relog.");
				} else {
					sender.sendMessage(String.valueOf(ChatColor.RED.toString())
							+ "Your chat has been re-enabled, type /togglechat to disable it again.");
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			return true;
		}
		if (label.startsWith("/toggletells")) {
			try {
				if (toggleTells(sender)) {
					sender.sendMessage(String.valueOf(ChatColor.RED.toString())
							+ "You will no longer receive tells, type /toggletells to see them again.");
				} else {
					sender.sendMessage(String.valueOf(ChatColor.RED.toString())
							+ "You now receive tells, type /toggletells to disable them again.");
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
			return true;
		}
		if (((label.startsWith("/ignore") || label.startsWith("/unignore")) && ignoresEnabled) && args.length != 1)
			try {
				API.println("Attempting to ignore player " + args[1]); //
				if (args.length < 1) {
					sender.sendMessage("You forgot to type the name of the player.");
					return true;
				}
				if (args[1].length() > 16) {
					sender.sendMessage("You entered an invalid player name.");
					return true;
				}
				Player ignorable = Bukkit.getServer().getPlayer(args[1]); //
				if (ignorable == null) {
					sender.sendMessage("You entered a player who doesn't exist or is offline.");
					return true;
				}
				ignorePlayer(sender, args[1]); //
				return true;
			} catch (IOException e) {
				e.printStackTrace();
			}
		if (label.startsWith("/ignorelist") && ignoresEnabled)
			try {
				sender.sendMessage(String.valueOf(ChatColor.RED.toString()) + "Ignored players:");
				int i = 0;
				for (String ignores : getCCPlayer(sender).getIgnoreList()) {
					if (Bukkit.getPlayer(ignores) != null) {
						sender.sendMessage(String.valueOf(ChatColor.RED.toString()) + ChatColor.ITALIC
								+ Bukkit.getPlayer(ignores).getName());
					} else {
						sender.sendMessage(
								String.valueOf(ChatColor.RED.toString()) + ChatColor.ITALIC + "(Offline) " + ignores);
					}
					i++;
				}
				sender.sendMessage(String.valueOf(ChatColor.RED.toString()) + i + " players ignored.");
				return true;
			} catch (IOException e) {
				e.printStackTrace();
			}
		if (args.length > 1 && label.startsWith("/chatco")) {
			if (sender.isOp()) {
				if (args.length == 2) {
					if (args[1].equalsIgnoreCase("reload")) {
						sender.sendMessage("ExploitsXChat config reloaded!");
						return true;

					}
					sender.sendMessage(
							"You forgot to specify whether you wanted to enable or disable the component (chatco component e/ed)");
					return true;
				}
				if (args[1].equalsIgnoreCase("spoilers"))
					if (args[2].equalsIgnoreCase("e")) {
						AllChat.readConfig(3);
						sender.sendMessage("Spoilers enabled");
					} else if (args[2].equalsIgnoreCase("d")) {
						AllChat.readConfig(4);
						sender.sendMessage("Spoilers disabled");
					}
				if (args[1].equalsIgnoreCase("whispers"))
					if (args[2].equalsIgnoreCase("e")) {
						AllChat.readConfig(5);
						sender.sendMessage("Whisper changes enabled");
					} else if (args[2].equalsIgnoreCase("d")) {
						AllChat.readConfig(6);
						sender.sendMessage("Whisper changes disabled");
					}
				if (args[1].equalsIgnoreCase("newcommands"))
					if (args[2].equalsIgnoreCase("e")) {
						AllChat.readConfig(7);
						sender.sendMessage("New Whisper commands enabled");
					} else if (args[2].equalsIgnoreCase("d")) {
						AllChat.readConfig(8);
						sender.sendMessage("New whisper commands disabled");
					}
				if (args[1].equalsIgnoreCase("whisperlog"))
					if (args[2].equalsIgnoreCase("e")) {
						AllChat.readConfig(9);
						sender.sendMessage("Whisperlog enabled");
					} else if (args[2].equalsIgnoreCase("d")) {
						AllChat.readConfig(10);
						sender.sendMessage("Whisperlog disabled");
					}
				return true;
			}
			return false;
		}
		return false;
	}

	public static void copy(InputStream in, File file) {
		try {
			OutputStream out = new FileOutputStream(file);
			byte[] buf = new byte[1024];
			int len;
			while ((len = in.read(buf)) > 0)
				out.write(buf, 0, len);
			out.close();
			in.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void docommandLog(String text, String sender) {
		try {
			FileWriter fwo = new FileWriter(CommandLog, true);
			BufferedWriter bwo = new BufferedWriter(fwo);
			bwo.write(String.valueOf(now()) + " " + sender + ": " + text);
			bwo.newLine();
			bwo.close();
		} catch (IOException ioexception) {
			ioexception.printStackTrace();
		}
	}

	public static void enable() {
		dataFolder = ExploitFixer.getPlugin().getDataFolder();
		WhisperLog = new File(dataFolder, "whisperlog.txt");
		CommandLog = new File(dataFolder, "commandlog.txt");
		Changelog = new File(dataFolder, "changelog.txt");
		if (!WhisperLog.exists()) {
			WhisperLog.getParentFile().mkdirs();
			ChatCommandHandle.copy(ExploitFixer.getPlugin().getResource("whisperlog.txt"), WhisperLog);
		}
		if (!CommandLog.exists()) {
			CommandLog.getParentFile().mkdirs();
			ChatCommandHandle.copy(ExploitFixer.getPlugin().getResource("commandlog.txt"), CommandLog);
		}
		File cl = new File("plugins/ExploitsX/changelog.txt");
		if (cl.exists())
			cl.delete();
		Changelog.getParentFile().mkdirs();
		ChatCommandHandle.copy(ExploitFixer.getPlugin().getResource("changelog.txt"), Changelog);
	}

	public static CCPlayer getCCPlayer(Player p) throws IOException {
		for (CCPlayer cp : playerlist) {
			if (cp.playerName.equals(p.getName()))
				return cp;
		}
		CCPlayer ccp = new CCPlayer(p, p.getName());
		playerlist.add(ccp);
		return ccp;
	}

	private static void ignorePlayer(Player p, String target) throws IOException {
		if (target != null) {
			if (Bukkit.getPlayer(target) == null) {
				p.sendMessage(ChatColor.DARK_RED + "That is not a player.");
			} else {
				String message = String.valueOf(ChatColor.RED.toString()) + ChatColor.ITALIC + target + ChatColor.RESET
						+ ChatColor.RED;
				if (getCCPlayer(p).isIgnored(Bukkit.getPlayer(target).getUniqueId().toString())) {
					message = String.valueOf(message) + " unignored.";
				} else {
					message = String.valueOf(message) + " ignored.";
				}
				p.sendMessage(message);
				getCCPlayer(p).saveIgnoreList(Bukkit.getPlayer(target).getUniqueId().toString());
			}
		} else {
			p.sendMessage(ChatColor.DARK_RED + "That is not a player.");
		}
	}

	public static String now() {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return sdf.format(cal.getTime());
	}

	public static void onPlayerCommandPreprocess(PlayerCommandPreprocessEvent event, String message, Player player) {
		// override chatco
		if (checkChatCoCommand(event, player, message)) {
			event.setCancelled(true);
		}
	}

	public static void reload() {
		rewire = CH.getBoolean("rewire-chatco", true);
		togglechat = CH.getBoolean("ChatCo.toggleChatEnabled", true);
		ignoresEnabled = CH.getBoolean("ChatCo.ignoresEnabled", true);
	}

	private static boolean toggleChat(Player p) throws IOException {
		if ((ChatCommandHandle.getCCPlayer(p)).chatDisabled) {
			(ChatCommandHandle.getCCPlayer(p)).chatDisabled = false;
			return false;
		}
		(ChatCommandHandle.getCCPlayer(p)).chatDisabled = true;
		return true;
	}

	private static boolean toggleTells(Player p) throws IOException {
		if ((ChatCommandHandle.getCCPlayer(p)).tellsDisabled) {
			(ChatCommandHandle.getCCPlayer(p)).tellsDisabled = false;
			return false;
		}
		(ChatCommandHandle.getCCPlayer(p)).tellsDisabled = true;
		return true;
	}

	@EventHandler(priority = EventPriority.HIGH)
	public void onPlayerChat(AsyncPlayerChatEvent event) throws IOException {
		if (rewire)
			AllChat.onPlayerChat(event);
	}

	@EventHandler
	public void onPlayerQuit(final PlayerQuitEvent event) {
		if (rewire)
			AllChat.onPlayerQuit(event);
	}
}
