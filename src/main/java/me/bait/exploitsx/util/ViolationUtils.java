package me.bait.exploitsx.util;

import me.bait.exploitsx.ExploitsX;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import java.util.HashMap;

//-- // WARNING \\ --
// Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International
//        Lorsque Vous exercez les Droits accordés par la licence (définis ci-dessous), Vous acceptez d'être lié par les termes et conditions de la présente Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International (la « Licence publique »). Dans la mesure où la présente Licence publique peut être interprétée comme un contrat, Vous bénéficiez des Droits accordés par la licence en contrepartie de Votre acceptation des présents termes et conditions, et le Donneur de licence Vous accorde ces droits en contrepartie des avantages que lui procure le fait de mettre à disposition l’Œuvre sous licence en vertu des présents termes et conditions.
//-- https://creativecommons.org/licenses/by-nc-nd/4.0/deed.fr
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ --

public class ViolationUtils {
    HashMap<Player, Integer> vlMap = new HashMap<Player, Integer>();
    HashMap<Player, Boolean> vlActive = new HashMap<Player, Boolean>();

    public void addVls(Player player, int vls) {
        if (!vlMap.containsKey(player)) {
            vlMap.put(player, vls);
        } else {
            vlMap.replace(player, Vls(player) + 1);
        }
    }

    public void begin() {
        Bukkit.getScheduler().runTaskTimer(ExploitsX.getPlugin(), new Runnable() {
                    @Override
                    public void run() {
                        for (Player player : Bukkit.getOnlinePlayers()) {
                            if (vlMap.containsKey(player) && vlActive.containsKey(player)) {
                                if (getVls(player) > 0) {
                                    vlMap.replace(player, getVls(player) - 1);
                                } else {
                                    vlMap.remove(player);
                                    vlActive.remove(player);
                                }
                            }
                        }
                    }
                }, ExploitsX.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
                ExploitsX.getPlugin().getConfig().getLong("vlremovedelay"));
    }

    public void begin(int speed) {
        Bukkit.getScheduler().runTaskTimer(ExploitsX.getPlugin(), new Runnable() {
                    @Override
                    public void run() {
                        for (Player player : Bukkit.getOnlinePlayers()) {
                            if (vlMap.containsKey(player)) {
                                if (vlActive.containsKey(player)) {
                                    if (getVls(player) > 0) {
                                        vlMap.replace(player, getVls(player) - 1);
                                    } else {
                                        vlMap.remove(player);
                                        vlActive.remove(player);
                                    }
                                }
                            }
                        }
                    }
                }, ExploitsX.getPlugin().getConfig().getLong("vlremovedelaystartupby"),
                ExploitsX.getPlugin().getConfig().getLong("vlremovedelay") * speed);
    }

    public int getVls(Player player) {
        int vls = 0;
        if (vlMap.containsKey(player)) {
            vls = vlMap.get(player);
        }
        return vls;
    }

    public void removeVL(final Player player) {
        if (vlActive.containsKey(player)) {
            vlActive.replace(player, true);
        } else {
            vlActive.put(player, true);
        }
    }

    public void resetVls(Player player) {
        vlMap.remove(player);
        vlActive.remove(player);
    }

    public boolean vlMapContainsPlayer(Player player) {
        return vlMap.containsKey(player);
    }

    public int Vls(Player player) {
        return vlMap.get(player);
    }
}
