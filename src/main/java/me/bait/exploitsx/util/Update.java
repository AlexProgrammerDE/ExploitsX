package me.bait.exploitsx.util;

import me.bait.exploitsx.ExploitsX;
import org.bukkit.Server;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.*;

//-- // WARNING \\ --
// Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International
//        Lorsque Vous exercez les Droits accordés par la licence (définis ci-dessous), Vous acceptez d'être lié par les termes et conditions de la présente Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International (la « Licence publique »). Dans la mesure où la présente Licence publique peut être interprétée comme un contrat, Vous bénéficiez des Droits accordés par la licence en contrepartie de Votre acceptation des présents termes et conditions, et le Donneur de licence Vous accorde ces droits en contrepartie des avantages que lui procure le fait de mettre à disposition l’Œuvre sous licence en vertu des présents termes et conditions.
//-- https://creativecommons.org/licenses/by-nc-nd/4.0/deed.fr
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ --

public class Update {
    public static File NewConfig;

    public static File NewLists;

    public static File NewChatCo;

    public static File dataFolder;

    public static void checkUpdates() {
        dataFolder = ExploitsX.getPlugin().getDataFolder();
        Server server = ExploitsX.getPlugin().getServer();
        FileConfiguration config = ExploitsX.getPlugin().getConfig();
        YamlConfiguration cfgold = YamlConfiguration
                .loadConfiguration(new InputStreamReader(ExploitsX.getPlugin().getResource("config.yml")));
        YamlConfiguration cfyml = YamlConfiguration
                .loadConfiguration(new InputStreamReader(ExploitsX.getPlugin().getResource("config2.yml")));
        YamlConfiguration cf2yml = YamlConfiguration
                .loadConfiguration(new InputStreamReader(ExploitsX.getPlugin().getResource("chatco.yml")));
        NewChatCo = new File(dataFolder, "chatcoymlupdate.txt");
        if (ConfigHelper.getInt("listsymlversion", 0) < cf2yml.getInt("chatymlversion")) {
            server.getLogger().warning(
                    "ExploitsX > ChatCo file out of date. Please look at the new lists file (listsipdate.yml) and compare the variables to see what's missing in order to fix it. Change the last line in the config 'version' to the new version described in listsupdate.yml to disable this message.");
            NewLists.getParentFile().mkdirs();
            copy(ExploitsX.getPlugin().getResource("chatco.yml"), NewChatCo);
        } else {
            if (ConfigHelper.getInt("listsymlversion") > cf2yml.getInt("chatymlversion")) {
                server.getLogger().warning(
                        "ExploitsX > Future ChatCo file found. Are you a time traveller? I hope not... I created listsupdate.yml so you can see if you're missing anything this version needs.");
                NewChatCo.getParentFile().mkdirs();
                copy(ExploitsX.getPlugin().getResource("chatco.yml"), NewChatCo);
            } else {
                File cl2 = new File("plugins/ExploitsX/chatcoymlupdate.txt");
                if (cl2.exists())
                    cl2.delete();
                if (ConfigHelper.getInt("logging-level") > 0)
                    API.println(API.getPrefix() + "chatco.yml is up to date");
            }
        }
        // config2.yml
        NewLists = new File(dataFolder, "config2update.txt");
        if (ConfigHelper.getInt("listsymlversion", 0) < cfyml.getInt("listsymlversion")) {
            server.getLogger().warning(
                    "ExploitsX > Config2 file out of date. Please look at the new lists file (listsipdate.yml) and compare the variables to see what's missing in order to fix it. Change the last line in the config 'version' to the new version described in listsupdate.yml to disable this message.");
            NewLists.getParentFile().mkdirs();
            copy(ExploitsX.getPlugin().getResource("config2.yml"), NewLists);
        } else {
            if (ConfigHelper.getInt("listsymlversion") > cfyml.getInt("listsymlversion")) {
                server.getLogger().warning(
                        "ExploitsX > Future Config2 file found. Are you a time traveller? I hope not... I created listsupdate.yml so you can see if you're missing anything this version needs.");
                NewLists.getParentFile().mkdirs();
                copy(ExploitsX.getPlugin().getResource("config2.yml"), NewLists);
            } else {
                File cl2 = new File("plugins/ExploitsX/config2update.txt");
                if (cl2.exists())
                    cl2.delete();
                if (ConfigHelper.getInt("logging-level") > 0)
                    API.println(API.getPrefix() + "config2.yml is up to date");
            }
        }
        // config.yml
        NewConfig = new File(dataFolder, "configupdate.txt");
        if (config.getInt("confversion") < cfgold.getInt("confversion")) {
            server.getLogger().warning(
                    "ExploitsX > Config out of date. Please look at the new config file and compare the variables to see what's missing in order to fix it. Change the last line in the config to the new version described in configupdate.yml to disable this message.");
            NewConfig.getParentFile().mkdirs();
            copy(ExploitsX.getPlugin().getResource("config.yml"), NewConfig);
        } else {
            if (config.getInt("confversion") > cfgold.getInt("confversion")) {
                server.getLogger().warning(
                        "ExploitsX > Future Config found. Are you a time traveller? I hope not... I created configupdate.yml so you can see if you're missing anything this version needs.");
                NewConfig.getParentFile().mkdirs();
                copy(ExploitsX.getPlugin().getResource("config.yml"), NewConfig);
            } else {
                File cl2 = new File("plugins/ExploitsX/configupdate.txt");
                if (cl2.exists())
                    cl2.delete();
                if (ConfigHelper.getInt("logging-level") > 0)
                    API.println(API.getPrefix() + "config.yml is up to date");
            }
        }
    }

    private static void copy(InputStream in, File file) {
        try {
            OutputStream out = new FileOutputStream(file);
            byte[] buf = new byte[1024];
            int len;
            while ((len = in.read(buf)) > 0)
                out.write(buf, 0, len);
            out.close();
            in.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
