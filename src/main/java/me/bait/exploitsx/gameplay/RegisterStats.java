package me.bait.exploitsx.gameplay;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.Messages;
import me.bait.exploitsx.util.API;
import me.bait.exploitsx.util.IPCrypt;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.InvalidConfigurationException;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

//-- // WARNING \\ --
// Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International
//        Lorsque Vous exercez les Droits accordés par la licence (définis ci-dessous), Vous acceptez d'être lié par les termes et conditions de la présente Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International (la « Licence publique »). Dans la mesure où la présente Licence publique peut être interprétée comme un contrat, Vous bénéficiez des Droits accordés par la licence en contrepartie de Votre acceptation des présents termes et conditions, et le Donneur de licence Vous accorde ces droits en contrepartie des avantages que lui procure le fait de mettre à disposition l’Œuvre sous licence en vertu des présents termes et conditions.
//-- https://creativecommons.org/licenses/by-nc-nd/4.0/deed.fr
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ --

public class RegisterStats implements CommandExecutor, Listener {

	public static HashMap<Player, Long> kill = new HashMap<>(); // done

	public static HashMap<Player, Long> death = new HashMap<>(); // done

	public static HashMap<Player, Long> time = new HashMap<>(); // done

	public static HashMap<Player, Long> places = new HashMap<>();

	public static HashMap<Player, Long> breaks = new HashMap<>();

	public static HashMap<Player, Long> messages = new HashMap<>(); // done

	public static HashMap<Player, Long> travel = new HashMap<>();

	public static void count() {
		double tps = me.bait.exploitsx.util.TPS.getTPS();
		for (Player p : Bukkit.getOnlinePlayers()) {
			if (time.containsKey(p)) {
				Long out = time.get(p);
				double timed = out.doubleValue();
				double calc = (100 / tps);
				timed = timed + calc;
				long v1 = Math.round(timed);
				time.put(p, v1);
			}
		}
	}

	public static void onChat(Player p) {
		if (messages.containsKey(p)) {
			Long message = messages.get(p);
			message++;
			messages.put(p, message);
		}
	}

	public static void onDisable() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.0"))) { //$NON-NLS-1$
					ExploitsX.getPlugin().getServer()
							.broadcastMessage(ChatColor.DARK_RED + Messages.getString("RS.1") + ChatColor.AQUA //$NON-NLS-1$
									+ Messages.getString("RS.2") //$NON-NLS-1$
									+ ExploitsX.getPlugin().getDescription().getVersion() + ChatColor.DARK_RED
									+ Messages.getString("RS.3")); //$NON-NLS-1$
				}
				for (Player p : Bukkit.getOnlinePlayers()) {
					if (!RegisterStats.death.containsKey(p)) {
						RegisterStats.death.put(p, 0L);
					}
					if (!RegisterStats.kill.containsKey(p)) {
						RegisterStats.kill.put(p, 0L);
					}
					if (!RegisterStats.time.containsKey(p)) {
						RegisterStats.time.put(p, 0L);
					}
					if (!RegisterStats.places.containsKey(p)) {
						RegisterStats.places.put(p, 0L);
					}
					if (!RegisterStats.breaks.containsKey(p)) {
						RegisterStats.breaks.put(p, 0L);
					}
					if (!RegisterStats.messages.containsKey(p)) {
						RegisterStats.messages.put(p, 0L);
					}
					if (!RegisterStats.travel.containsKey(p)) {
						RegisterStats.travel.put(p, 0L);
					}
					String uuid = p.getUniqueId().toString();
					String firstThreeChars = uuid.substring(0, 3);
					File f = new File(Messages.getString("RS.4") + uuid + Messages.getString("RS.5")); //$NON-NLS-1$ //$NON-NLS-2$
					YamlConfiguration yaml = YamlConfiguration.loadConfiguration(f);
					setData(p, yaml);
					try {
						File dir = new File(Messages.getString("RS.6") + firstThreeChars); //$NON-NLS-1$
						if (!dir.exists())
							dir.mkdirs();
						File file = new File(Messages.getString("RS.7") + firstThreeChars + Messages.getString("RS.8") //$NON-NLS-1$ //$NON-NLS-2$
								+ uuid + Messages.getString("RS.9")); //$NON-NLS-1$
						if (file.exists()) {
							if (file.delete()) {
								if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.10"))) { //$NON-NLS-1$
									API.println(Messages.getString("RS.11") + uuid + Messages.getString("RS.12")); //$NON-NLS-1$ //$NON-NLS-2$
								}
							} else {
								API.println(Messages.getString("RS.13") + firstThreeChars + Messages.getString("RS.14") //$NON-NLS-1$ //$NON-NLS-2$
										+ uuid + Messages.getString("RS.15")); //$NON-NLS-1$
							}
						}
						yaml.save(Messages.getString("RS.16") + firstThreeChars + Messages.getString("RS.17") + uuid //$NON-NLS-1$ //$NON-NLS-2$
								+ Messages.getString("RS.18")); //$NON-NLS-1$
					} catch (IOException e) {
						e.printStackTrace();
					}
					removePlayer(p);
				}
			}
		}).start();
	}

	public static void onEnable() {
		Bukkit.getScheduler().scheduleSyncRepeatingTask(ExploitsX.getPlugin(), new Runnable() {
			@Override
			public void run() {
				count();
			}
		}, 0L, 100L);
		new Thread(() -> {
			if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.19"))) { //$NON-NLS-1$
				ExploitsX.getPlugin().getServer()
						.broadcastMessage(ChatColor.DARK_RED + Messages.getString("RS.20") + ChatColor.AQUA //$NON-NLS-1$
								+ Messages.getString("RS.21") //$NON-NLS-1$
								+ ExploitsX.getPlugin().getDescription().getVersion() + ChatColor.DARK_RED
								+ Messages.getString("RS.22")); //$NON-NLS-1$
			}
			for (Player p : Bukkit.getOnlinePlayers()) {
				String uuid = p.getUniqueId().toString();
				String firstThreeChars = uuid.substring(0, 3);
				File dir = new File(Messages.getString("RS.23") + firstThreeChars); //$NON-NLS-1$
				if (!dir.exists())
					dir.mkdirs();
				File f = new File(Messages.getString("RS.24") + firstThreeChars + Messages.getString("RS.25") + uuid //$NON-NLS-1$ //$NON-NLS-2$
						+ Messages.getString("RS.26")); //$NON-NLS-1$
				if (!f.exists()) {
					try {
						f.getParentFile().mkdirs();
						YamlConfiguration yaml = new YamlConfiguration();
						yaml.createSection(Messages.getString("RS.27")); //$NON-NLS-1$
						yaml.createSection(Messages.getString("RS.28")); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.29"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.30"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.31"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.32"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.33"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.34"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.35"), 0); //$NON-NLS-1$
						yaml.addDefault(Messages.getString("RS.36"), Messages.getString("RS.37")); //$NON-NLS-1$ //$NON-NLS-2$
						yaml.set(Messages.getString("RS.38"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.39"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.40"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.41"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.42"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.43"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.44"), 0); //$NON-NLS-1$
						yaml.set(Messages.getString("RS.45"), p.getName()); //$NON-NLS-1$
						yaml.save(Messages.getString("RS.46") + firstThreeChars + Messages.getString("RS.47") + uuid //$NON-NLS-1$ //$NON-NLS-2$
								+ Messages.getString("RS.48")); //$NON-NLS-1$
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					RegisterStats.kill.put(p, 0L);
					RegisterStats.time.put(p, 0L);
					RegisterStats.death.put(p, 0L);
					RegisterStats.places.put(p, 0L);
					RegisterStats.breaks.put(p, 0L);
					RegisterStats.messages.put(p, 0L);
					RegisterStats.travel.put(p, 0L);
				} else {
					YamlConfiguration save = new YamlConfiguration();
					try {
						save.load(f);
					} catch (IOException | InvalidConfigurationException er) {
						er.printStackTrace();
					}
					kill.put(p, save.getLong(Messages.getString("RS.49"))); //$NON-NLS-1$
					death.put(p, save.getLong(Messages.getString("RS.50"))); //$NON-NLS-1$
					time.put(p, save.getLong(Messages.getString("RS.51"))); //$NON-NLS-1$
					places.put(p, save.getLong(Messages.getString("RS.52"))); //$NON-NLS-1$
					breaks.put(p, save.getLong(Messages.getString("RS.53"))); //$NON-NLS-1$
					messages.put(p, save.getLong(Messages.getString("RS.54"))); //$NON-NLS-1$
					travel.put(p, save.getLong(Messages.getString("RS.55"))); //$NON-NLS-1$
				}
			}
		}).start();
	}

	public static void removePlayer(Player p) {
		RegisterStats.kill.remove(p);
		RegisterStats.time.remove(p);
		RegisterStats.death.remove(p);
		RegisterStats.places.remove(p);
		RegisterStats.breaks.remove(p);
		RegisterStats.messages.remove(p);
		RegisterStats.travel.remove(p);
	}

	public static YamlConfiguration setData(Player p, YamlConfiguration yaml) {
		yaml.createSection(Messages.getString("RS.56")); //$NON-NLS-1$
		yaml.createSection(Messages.getString("RS.57")); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.58"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.59"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.60"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.61"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.62"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.63"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.64"), 0); //$NON-NLS-1$
		yaml.addDefault(Messages.getString("RS.65"), Messages.getString("RS.66")); //$NON-NLS-1$ //$NON-NLS-2$
		yaml.set(Messages.getString("RS.67"), kill.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.68"), death.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.69"), time.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.70"), places.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.71"), breaks.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.72"), messages.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.73"), travel.get(p)); //$NON-NLS-1$
		yaml.set(Messages.getString("RS.74"), p.getName()); //$NON-NLS-1$
		return yaml;
	}

	@EventHandler
	public void onBreak(BlockBreakEvent e) {
		if (e.getPlayer() == null)
			return;
		Player p = e.getPlayer();
		if (breaks.containsKey(p)) {
			Long move = breaks.get(p);
			move++;
			breaks.put(p, move);
		}
	}

	@Override
	public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
		if (commandLabel.equalsIgnoreCase(Messages.getString("RS.75")) //$NON-NLS-1$
				|| commandLabel.equalsIgnoreCase(Messages.getString("RS.76")) //$NON-NLS-1$
				|| commandLabel.equalsIgnoreCase(Messages.getString("RS.77"))) { //$NON-NLS-1$
			Player subject = ExploitsX.getPlugin().getServer().getPlayer(sender.getName());
			if (args.length == 1) {
				subject = ExploitsX.getPlugin().getServer().getPlayer(args[0]);
			}
			if (subject == null)
				return false;
			sender.sendMessage(
					ChatColor.GREEN + Messages.getString("RS.78") + ChatColor.AQUA + subject.getName() //$NON-NLS-1$
							+ ChatColor.GREEN + Messages.getString("RS.79")); //$NON-NLS-1$
			sender.sendMessage(
					ChatColor.AQUA + Messages.getString("RS.80") + ChatColor.GREEN + RegisterStats.kill.get(subject)); //$NON-NLS-1$
			sender.sendMessage(
					ChatColor.AQUA + Messages.getString("RS.81") + ChatColor.GREEN + RegisterStats.death.get(subject)); //$NON-NLS-1$
			sender.sendMessage(
					ChatColor.AQUA + Messages.getString("RS.82") + ChatColor.GREEN + RegisterStats.breaks.get(subject)); //$NON-NLS-1$
			sender.sendMessage(
					ChatColor.AQUA + Messages.getString("RS.83") + ChatColor.GREEN + RegisterStats.places.get(subject)); //$NON-NLS-1$
			sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.84") + ChatColor.GREEN //$NON-NLS-1$
					+ RegisterStats.messages.get(subject));
			if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.85"))) { //$NON-NLS-1$
				sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.86") + ChatColor.GREEN //$NON-NLS-1$
						+ RegisterStats.travel.get(subject));
			}
			sender.sendMessage(ChatColor.AQUA + Messages.getString("RS.87") + ChatColor.GREEN //$NON-NLS-1$
					+ API.GetFormattedInterval(RegisterStats.time.get(subject)));
			sender.sendMessage(ChatColor.GREEN + Messages.getString("RS.88")); //$NON-NLS-1$
			return true;
		}
		return false;
	}

	@EventHandler
	public void onDeath(PlayerDeathEvent e) {
		int cancel = 0;
		Player k = e.getEntity().getKiller();
		Player d = e.getEntity();
		if (d == null || d.getType() != EntityType.PLAYER)
			return;
		if (k == null || k.getType() != EntityType.PLAYER) {
			List<Entity> near = e.getEntity().getNearbyEntities(10.0D, 10.0D, 10.0D);
			Long deaths = death.get(d.getPlayer());
			deaths++;
			death.put(d.getPlayer(), deaths);
			for (Entity entity : near) {
				if (cancel == 1)
					break;
				if (entity.getType() == EntityType.PLAYER || entity instanceof Player) {
					Player nearPlayer = (Player) entity;
					if (nearPlayer.getName().equals(d.getPlayer().getName()))
						return;
					if (!death.containsKey(d.getPlayer()))
						death.put(d.getPlayer(), 1L);
					if (!kill.containsKey(nearPlayer))
						kill.put(nearPlayer, 1L);
					if (!death.containsKey(nearPlayer))
						death.put(nearPlayer, 0L);
					if (!kill.containsKey(d.getPlayer()))
						kill.put(d.getPlayer(), 0L);
					Long kills = kill.get(nearPlayer);
					kills++;
					kill.put(nearPlayer, kills);
					cancel = 1;
				}
			}
			return;
		}
		if (!death.containsKey(d.getPlayer()))
			death.put(d.getPlayer(), 1L);
		if (!kill.containsKey(k.getPlayer()))
			kill.put(k.getPlayer(), 1L);
		if (!death.containsKey(k.getPlayer()))
			death.put(k.getPlayer(), 0L);
		if (!kill.containsKey(d.getPlayer()))
			kill.put(d.getPlayer(), 0L);
		Long kills = kill.get(k.getPlayer());
		Long deaths = death.get(d.getPlayer());
		kills++;
		deaths++;
		kill.put(k.getPlayer(), kills);
		death.put(d.getPlayer(), deaths);
	}

	@EventHandler
	public void onJoin(PlayerJoinEvent e) {
		new Thread(() -> {
			Player p = e.getPlayer();
			String uuid = p.getUniqueId().toString();
			String firstThreeChars = uuid.substring(0, 3);
			File dir = new File(Messages.getString("RS.89") + firstThreeChars); //$NON-NLS-1$
			if (!dir.exists())
				dir.mkdirs();
			File f = new File(Messages.getString("RS.90") + firstThreeChars + Messages.getString("RS.91") + uuid //$NON-NLS-1$ //$NON-NLS-2$
					+ Messages.getString("RS.92")); //$NON-NLS-1$
			if (!f.exists()) {
				try {
					f.getParentFile().mkdirs();
					YamlConfiguration yaml = new YamlConfiguration();
					setData(p, yaml);
					yaml.save(Messages.getString("RS.93") + firstThreeChars + Messages.getString("RS.94") + uuid //$NON-NLS-1$ //$NON-NLS-2$
							+ Messages.getString("RS.95")); //$NON-NLS-1$
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				RegisterStats.kill.put(p, 0L);
				RegisterStats.time.put(p, 0L);
				RegisterStats.death.put(p, 0L);
				RegisterStats.places.put(p, 0L);
				RegisterStats.breaks.put(p, 0L);
				RegisterStats.messages.put(p, 0L);
				RegisterStats.travel.put(p, 0L);
			} else {
				YamlConfiguration save = new YamlConfiguration();
				try {
					save.load(f);
				} catch (IOException | InvalidConfigurationException er) {
					er.printStackTrace();
				}
				kill.put(p, save.getLong(Messages.getString("RS.96"))); //$NON-NLS-1$
				death.put(p, save.getLong(Messages.getString("RS.97"))); //$NON-NLS-1$
				time.put(p, save.getLong(Messages.getString("RS.98"))); //$NON-NLS-1$
				places.put(p, save.getLong(Messages.getString("RS.99"))); //$NON-NLS-1$
				breaks.put(p, save.getLong(Messages.getString("RS.100"))); //$NON-NLS-1$
				messages.put(p, save.getLong(Messages.getString("RS.101"))); //$NON-NLS-1$
				travel.put(p, save.getLong(Messages.getString("RS.102"))); //$NON-NLS-1$
			}
		}).start();
	}

	@EventHandler
	public void onLeave(PlayerQuitEvent e) {
		new Thread(() -> {
			Player p = e.getPlayer();
			if (!RegisterStats.death.containsKey(p)) {
				RegisterStats.death.put(p, 0L);
			}
			if (!RegisterStats.kill.containsKey(p)) {
				RegisterStats.kill.put(p, 0L);
			}
			if (!RegisterStats.time.containsKey(p)) {
				RegisterStats.time.put(p, 0L);
			}
			if (!RegisterStats.places.containsKey(p)) {
				RegisterStats.places.put(p, 0L);
			}
			if (!RegisterStats.breaks.containsKey(p)) {
				RegisterStats.breaks.put(p, 0L);
			}
			if (!RegisterStats.messages.containsKey(p)) {
				RegisterStats.messages.put(p, 0L);
			}
			if (!RegisterStats.travel.containsKey(p)) {
				RegisterStats.travel.put(p, 0L);
			}
			String uuid = p.getUniqueId().toString();
			String firstThreeChars = uuid.substring(0, 3);
			File f = new File(Messages.getString("RS.103") + firstThreeChars + Messages.getString("RS.104") + uuid //$NON-NLS-1$ //$NON-NLS-2$
					+ Messages.getString("RS.105")); //$NON-NLS-1$
			YamlConfiguration yaml = YamlConfiguration.loadConfiguration(f);
			setData(p, yaml);
			try {
				File dir = new File(Messages.getString("RS.106") + firstThreeChars); //$NON-NLS-1$
				if (!dir.exists())
					dir.mkdirs();
				File file = new File(Messages.getString("RS.107") + firstThreeChars + Messages.getString("RS.108") //$NON-NLS-1$ //$NON-NLS-2$
						+ uuid + Messages.getString("RS.109")); //$NON-NLS-1$
				if (file.exists()) {
					if (file.delete()) {
						if (ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.110"))) { //$NON-NLS-1$
							API.println(Messages.getString("RS.111") + uuid + Messages.getString("RS.112")); //$NON-NLS-1$ //$NON-NLS-2$
						}
					} else {
						API.println(
								Messages.getString("RS.113") + firstThreeChars + Messages.getString("RS.114") + uuid //$NON-NLS-1$ //$NON-NLS-2$
										+ Messages.getString("RS.115")); //$NON-NLS-1$
					}
				}
				yaml.save(Messages.getString("RS.116") + firstThreeChars + Messages.getString("RS.117") + uuid //$NON-NLS-1$ //$NON-NLS-2$
						+ Messages.getString("RS.118")); //$NON-NLS-1$
			} catch (IOException e1) {
				e1.printStackTrace();
			}
			removePlayer(p);
			IPCrypt.quit(e.getPlayer());
		}).start();
	}

	Boolean elog = ExploitsX.getPlugin().getConfig().getBoolean(Messages.getString("RS.119"));

	@EventHandler
	public void onMove(PlayerMoveEvent e) {
		if (elog) { //$NON-NLS-1$
			Location to = e.getTo();
			Location from = e.getFrom();
			if (to.getBlockX() == from.getBlockX() && to.getBlockY() == from.getBlockY()
					&& to.getBlockZ() == from.getBlockZ()) {
				return;
			}
			Player p = e.getPlayer();
			if (travel.containsKey(p)) {
				Long move = travel.get(p);
				move++;
				travel.put(p, move);
			}
		}
	}

	@EventHandler
	public void onPlace(BlockPlaceEvent e) {
		if (e.getPlayer() == null)
			return;
		Player p = e.getPlayer();
		if (places.containsKey(p)) {
			Long move = places.get(p);
			move++;
			places.put(p, move);
		}
	}
}
