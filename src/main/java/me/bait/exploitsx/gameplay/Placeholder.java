package me.bait.exploitsx.gameplay;

import java.math.BigDecimal;
import java.math.RoundingMode;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.util.API;
import me.clip.placeholderapi.expansion.PlaceholderExpansion;
import org.jetbrains.annotations.NotNull;

//THIS WORK IS UNDER EXCLUSIVE COPRIGHT FOR BAITCORP LABS. DISTRIBUTION, MODIFICATION, SELLING, OR SHARING WITHOUT EXPLICIT PERMISSION FROM BAITCORP LABS IS STRICTLY PROHIBITED.
//ExploitsX Sebastian Giheta 2019-2020

public class Placeholder extends PlaceholderExpansion {

	public static double round(double value, int places) {
		if (places < 0)
			throw new IllegalArgumentException();
		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}

	@Override
	public @NotNull String getAuthor() {
		return "baitcorp";
	}

	@Override
	public @NotNull String getIdentifier() {
		return "ef";
	}

	@Override
	public @NotNull String getVersion() {
		return ExploitsX.getPlugin().getDescription().getVersion();
	}

	@Override
	public String onPlaceholderRequest(Player p, String identifier) {
		if (identifier.equals("tps")) {
			double TPS = (API.getTps());
			double intTPS = round(TPS, 2);
			if (intTPS > 19.5D)
				return "�a20.0*";
			if (intTPS <= 19.5D && intTPS > 15.0D)
				return "�a" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS > 12.0D)
				return "�e" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
					&& intTPS > 6.0D)
				return "�c" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
					&& intTPS <= 6.0D)
				return "�4" + intTPS;
		}
		if (identifier.equals("online")) {
			int players = Bukkit.getServer().getOnlinePlayers().size();
			return String.valueOf(players);
		}
		if (identifier.equals("uptime")) {
			return String.valueOf(API.GetFormattedInterval(API.timeSeconds));
		}
		if (p == null)
			return "";
		return null;
	}
}
