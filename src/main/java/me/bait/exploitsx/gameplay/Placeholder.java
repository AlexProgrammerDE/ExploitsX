package me.bait.exploitsx.gameplay;

import me.bait.exploitsx.ExploitsX;
import me.bait.exploitsx.util.API;
import me.clip.placeholderapi.expansion.PlaceholderExpansion;
import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;

import java.math.BigDecimal;
import java.math.RoundingMode;

//-- // WARNING \\ --
// Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International
//        Lorsque Vous exercez les Droits accordés par la licence (définis ci-dessous), Vous acceptez d'être lié par les termes et conditions de la présente Licence publique Creative Commons Attribution - Utilisation non commerciale - Pas d’Œuvre dérivée 4.0 International (la « Licence publique »). Dans la mesure où la présente Licence publique peut être interprétée comme un contrat, Vous bénéficiez des Droits accordés par la licence en contrepartie de Votre acceptation des présents termes et conditions, et le Donneur de licence Vous accorde ces droits en contrepartie des avantages que lui procure le fait de mettre à disposition l’Œuvre sous licence en vertu des présents termes et conditions.
//-- https://creativecommons.org/licenses/by-nc-nd/4.0/deed.fr
//-- ExploitsX Sebastian Giheta 2019-2020
//-- //         \\ --

public class Placeholder extends PlaceholderExpansion {

	public static double round(double value, int places) {
		if (places < 0)
			throw new IllegalArgumentException();
		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}

	@Override
	public @NotNull String getAuthor() {
		return "baitcorp";
	}

	@Override
	public @NotNull String getIdentifier() {
		return "ef";
	}

	@Override
	public @NotNull String getVersion() {
		return ExploitsX.getPlugin().getDescription().getVersion();
	}

	@Override
	public String onPlaceholderRequest(Player p, String identifier) {
		if (identifier.equals("tps")) {
			double TPS = (API.getTps());
			double intTPS = round(TPS, 2);
			if (intTPS > 19.5D)
				return "§a20.0*";
			if (intTPS <= 19.5D && intTPS > 15.0D)
				return "§a" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS > 12.0D)
				return "§e" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
					&& intTPS > 6.0D)
				return "§c" + intTPS;
			if (intTPS <= 19.5D && intTPS <= 15.0D && intTPS <= 12.0D
					&& intTPS <= 6.0D)
				return "§4" + intTPS;
		}
		if (identifier.equals("online")) {
			int players = Bukkit.getServer().getOnlinePlayers().size();
			return String.valueOf(players);
		}
		if (identifier.equals("uptime")) {
			return String.valueOf(API.GetFormattedInterval(API.timeSeconds));
		}
		if (p == null)
			return "";
		return null;
	}
}
